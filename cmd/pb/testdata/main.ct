# pb CLI test suite
# https://github.com/google/go-cmdtest

$ mkdir var
$ cd var
$ pb init
Initialized empty database in ${ROOTDIR}/var

# put a blob
$ fecho blob1 this is blob1
$ pb putblob sha256 < blob1
blob/sha256/b0b7f7cb7b484df1b0daa5ec8d038fd2ad605c8018427bc3a3945a431d4ae908

# get it (fully qualified path)
$ pb getblob blob/sha256/b0b/7f7/b0b7f7cb7b484df1b0daa5ec8d038fd2ad605c8018427bc3a3945a431d4ae908
this is blob1

# get it using canonical path
$ pb getblob blob/sha256/b0b7f7cb7b484df1b0daa5ec8d038fd2ad605c8018427bc3a3945a431d4ae908
this is blob1

# put blob with bad hash algo
$ fecho badblob1 this is badblob1
$ pb putblob sha257 < badblob1 --> FAIL
#not implemented: sha257 

# put nonexistent blob
$ pb putblob sha256 < badblob2 --> FAIL

# get nonexistent blob
$ pb getblob blob/sha256/000/000/000000deadbeef00000000000000000000000000000000000000000000000000 --> FAIL

#open /tmp/cmdtest426797214/var/blob/sha256/a0b7f7cb7b484df1b0daa5ec8d038fd2ad605c8018427bc3a3945a431d4ae908: no such file or directory 

# try a multiline blob
$ fecho blob2 multiline blob\nthis is line 2
$ pb putblob sha256 < blob2
blob/sha256/1a7b18e13062cfcdc1f36d53d0a852794e2547f8cf6379afd0c85958ba166262

# try a slightly bigger blob 
$ pb putblob sha256 < ../bigblob
blob/sha256/56250ff893aebd9b41712f784c9b3eda3426e09e3b0cea708317fbc406aeb590

# put a node
$ pb putnode sha256 blob/sha256/1a7/b18/1a7b18e13062cfcdc1f36d53d0a852794e2547f8cf6379afd0c85958ba166262 blob/sha256/562/50f/56250ff893aebd9b41712f784c9b3eda3426e09e3b0cea708317fbc406aeb590
node/sha256/1c27ff61d673083a92a0ee0ddd8abcbbea3a5a9c7db59800754b7b0734d1c2f3

# get it (fully qualified)
$ pb getnode node/sha256/1c2/7ff/1c27ff61d673083a92a0ee0ddd8abcbbea3a5a9c7db59800754b7b0734d1c2f3
blob/sha256/1a7b18e13062cfcdc1f36d53d0a852794e2547f8cf6379afd0c85958ba166262
blob/sha256/56250ff893aebd9b41712f784c9b3eda3426e09e3b0cea708317fbc406aeb590

# get it (canonical)
$ pb getnode node/sha256/1c27ff61d673083a92a0ee0ddd8abcbbea3a5a9c7db59800754b7b0734d1c2f3
blob/sha256/1a7b18e13062cfcdc1f36d53d0a852794e2547f8cf6379afd0c85958ba166262
blob/sha256/56250ff893aebd9b41712f784c9b3eda3426e09e3b0cea708317fbc406aeb590

# put a parent node
# XXX also test fully qualified inputs
$ pb putnode sha256 node/sha256/1c27ff61d673083a92a0ee0ddd8abcbbea3a5a9c7db59800754b7b0734d1c2f3 blob/sha256/b0b7f7cb7b484df1b0daa5ec8d038fd2ad605c8018427bc3a3945a431d4ae908
node/sha256/baf87585cfc90e782e7b7e3b6acb47b56a025f542e6066e26ed98d6a80954f14

# get it
$ pb getnode node/sha256/baf87585cfc90e782e7b7e3b6acb47b56a025f542e6066e26ed98d6a80954f14
node/sha256/72da79f509f1ab3ca8ebdad9af8ba9f4c9ce35448c207c8c10a1c3661c7a1431
blob/sha256/b0b7f7cb7b484df1b0daa5ec8d038fd2ad605c8018427bc3a3945a431d4ae908

# make a stream from that parent node
# - this just makes a symlink in var/stream and shows the result
$ pb putstream node/sha256/baf87585cfc90e782e7b7e3b6acb47b56a025f542e6066e26ed98d6a80954f14 stream1
stream/stream1 -> node/sha256/baf87585cfc90e782e7b7e3b6acb47b56a025f542e6066e26ed98d6a80954f14

# get a stream
# - calls Readlink("var/stream/stream1") and returns the canpath of the thing it's pointing at
$ pb getstream stream1
node/sha256/baf87585cfc90e782e7b7e3b6acb47b56a025f542e6066e26ed98d6a80954f14

# get stream fail
$ pb getstream stream42 --> FAIL

# list all of the leaf nodes in a stream 
$ pb lsstream stream1
blob/sha256/1a7b18e13062cfcdc1f36d53d0a852794e2547f8cf6379afd0c85958ba166262
blob/sha256/56250ff893aebd9b41712f784c9b3eda3426e09e3b0cea708317fbc406aeb590
blob/sha256/b0b7f7cb7b484df1b0daa5ec8d038fd2ad605c8018427bc3a3945a431d4ae908

# list all of the nodes in a stream, both leaf and inner, depth first
$ pb lsstream -a stream1
node/sha256/baf87585cfc90e782e7b7e3b6acb47b56a025f542e6066e26ed98d6a80954f14
node/sha256/72da79f509f1ab3ca8ebdad9af8ba9f4c9ce35448c207c8c10a1c3661c7a1431
blob/sha256/1a7b18e13062cfcdc1f36d53d0a852794e2547f8cf6379afd0c85958ba166262
blob/sha256/56250ff893aebd9b41712f784c9b3eda3426e09e3b0cea708317fbc406aeb590
blob/sha256/b0b7f7cb7b484df1b0daa5ec8d038fd2ad605c8018427bc3a3945a431d4ae908

# lsstream fail
$ pb lsstream stream42 --> FAIL
$ pb lsstream -a stream42 --> FAIL

# show a concatenation of all leaf node content in a stream
$ pb catstream stream1
multiline blob
this is line 2
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut vitae
dapibus lorem. Pellentesque habitant morbi tristique senectus et netus
et malesuada fames ac turpis egestas. Phasellus suscipit mattis
interdum. Praesent nec diam mi. In placerat est sit amet cursus
ullamcorper. Sed porta dignissim elementum. Quisque at dui pharetra,
rhoncus nibh in, maximus erat. Praesent diam sapien, semper sed
sollicitudin id, porttitor eu urna. Quisque vitae ligula non mi
sagittis varius. Orci varius natoque penatibus et magnis dis
parturient montes, nascetur ridiculus mus.
this is blob1

# same, but for tree
$ pb cattree node/sha256/baf87585cfc90e782e7b7e3b6acb47b56a025f542e6066e26ed98d6a80954f14
multiline blob
this is line 2
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut vitae
dapibus lorem. Pellentesque habitant morbi tristique senectus et netus
et malesuada fames ac turpis egestas. Phasellus suscipit mattis
interdum. Praesent nec diam mi. In placerat est sit amet cursus
ullamcorper. Sed porta dignissim elementum. Quisque at dui pharetra,
rhoncus nibh in, maximus erat. Praesent diam sapien, semper sed
sollicitudin id, porttitor eu urna. Quisque vitae ligula non mi
sagittis varius. Orci varius natoque penatibus et magnis dis
parturient montes, nascetur ridiculus mus.
this is blob1

# catstream fail
$ pb catstream stream42 --> FAIL

# improve coverage
$ pb putblob lkdsajf --> FAIL

$ pb getblob kakajsn --> FAIL
path not found: "kakajsn"

$ pb lsstream lsadkfj --> FAIL

# putfile
# create a huge file
$ dd status=none if=/dev/urandom of=${ROOTDIR}/hugefile bs=1M count=100

# put it 
$ pb putstream -q sha256 stream7 < ${ROOTDIR}/hugefile


# get it and save to hugefile.copy
$ pb catstream stream7 -o ${ROOTDIR}/hugefile.copy 

# compare
$ cmp ${ROOTDIR}/hugefile ${ROOTDIR}/hugefile.copy

# try executing code in an arbitrary language
# load the lang1 interpreter
$ pb putstream sha256 lang1 < ../lang1.sh 
stream/lang1 -> node/sha256/012661ca4b9d603d813d10ef66f08676938b6cd59baa105e1ad526b90645fada

# run a script written in lang1
$ pb exec ../hello.lang1
Hello, Universe!

# ensure stream names can include slashes
# XXX - also need to ensure they don't include '..', or that they otherwise
# XXX   resolve to anything outside of ./stream/
# $ pb putnode sha256 blob/sha256/1a7/b18/1a7b18e13062cfcdc1f36d53d0a852794e2547f8cf6379afd0c85958ba166262,/some/path
# node/sha256/8334d1e784ad1c5567a84ae7d182dc9e10b5778c02c15cd8ffc8200b673b435c
# $ pb putstream node/sha256/8334d1e784ad1c5567a84ae7d182dc9e10b5778c02c15cd8ffc8200b673b435c /some/stream
# /some/stream -> node/sha256/8334d1e784ad1c5567a84ae7d182dc9e10b5778c02c15cd8ffc8200b673b435c

