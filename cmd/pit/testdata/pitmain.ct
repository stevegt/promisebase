# pb CLI test suite
# https://github.com/google/go-cmdtest

$ mkdir var
$ cd var
$ pb init
Initialized empty database in ${ROOTDIR}/var

# put a blob
$ fecho blob1 this is blob1
$ pb putblob sha256 < blob1
blob/sha256/d173706e5ab6e45e3f99389002d085dc6ad663d4b8140cd98387708196425ab2

# get it (fully qualified path)
$ pb getblob blob/sha256/d17/370/d173706e5ab6e45e3f99389002d085dc6ad663d4b8140cd98387708196425ab2 
this is blob1

# get it using canonical path
$ pb getblob blob/sha256/d173706e5ab6e45e3f99389002d085dc6ad663d4b8140cd98387708196425ab2 
this is blob1

# put blob with bad hash algo
$ fecho badblob1 this is badblob1
$ pb putblob sha257 < badblob1 --> FAIL
function not implemented: sha257

# put nonexistent blob
$ pb putblob sha256 < badblob2 --> FAIL

# get nonexistent blob
$ pb getblob blob/sha256/000/000/000000deadbeef00000000000000000000000000000000000000000000000000 --> FAIL
not found: ${ROOTDIR}/var/blob/sha256/000/000/000000deadbeef00000000000000000000000000000000000000000000000000: no such file or directory

# try a multiline blob
$ fecho blob2 multiline blob\nthis is line 2
$ pb putblob sha256 < blob2
blob/sha256/814dae28c0306f25a40c515f53645a4af8bfd64247676e269c3b11c4a6068bce

# try a slightly bigger blob 
$ pb putblob sha256 < ../bigblob
blob/sha256/22c8aa3f0cb68164b766ce1b6bfef1b2dec069a7ef2ef17b74cdacf20042d995

# put a tree
$ pb puttree sha256 blob/sha256/814/dae/814dae28c0306f25a40c515f53645a4af8bfd64247676e269c3b11c4a6068bce blob/sha256/22c8aa3f0cb68164b766ce1b6bfef1b2dec069a7ef2ef17b74cdacf20042d995
tree/sha256/cbfaaffc675984fb796f15852275f3259e5240f1d6ce37cf0932b9eb78f83ce0

# get it (fully qualified)
$ pb gettree tree/sha256/cbf/aaf/cbfaaffc675984fb796f15852275f3259e5240f1d6ce37cf0932b9eb78f83ce0 
blob/sha256/814dae28c0306f25a40c515f53645a4af8bfd64247676e269c3b11c4a6068bce
blob/sha256/22c8aa3f0cb68164b766ce1b6bfef1b2dec069a7ef2ef17b74cdacf20042d995

# get it (canonical)
$ pb gettree tree/sha256/cbfaaffc675984fb796f15852275f3259e5240f1d6ce37cf0932b9eb78f83ce0 
blob/sha256/814dae28c0306f25a40c515f53645a4af8bfd64247676e269c3b11c4a6068bce
blob/sha256/22c8aa3f0cb68164b766ce1b6bfef1b2dec069a7ef2ef17b74cdacf20042d995

# put a parent tree
# XXX also test fully qualified inputs
$ pb puttree sha256 tree/sha256/cbfaaffc675984fb796f15852275f3259e5240f1d6ce37cf0932b9eb78f83ce0 blob/sha256/d173706e5ab6e45e3f99389002d085dc6ad663d4b8140cd98387708196425ab2 
tree/sha256/be20cdac6a4090168bf8a9423ef6ae2c5f027522aee87e06c384a8f9466e992c

# get it
$ pb gettree tree/sha256/be20cdac6a4090168bf8a9423ef6ae2c5f027522aee87e06c384a8f9466e992c
tree/sha256/cbfaaffc675984fb796f15852275f3259e5240f1d6ce37cf0932b9eb78f83ce0
blob/sha256/d173706e5ab6e45e3f99389002d085dc6ad663d4b8140cd98387708196425ab2

# make a stream from that parent tree
# - this just makes a symlink in var/stream and shows the result
$ pb linkstream tree/sha256/be20cdac6a4090168bf8a9423ef6ae2c5f027522aee87e06c384a8f9466e992c stream1
stream/stream1 -> tree/sha256/be20cdac6a4090168bf8a9423ef6ae2c5f027522aee87e06c384a8f9466e992c

# get a stream
# - calls Readlink("var/stream/stream1") and returns the canpath of the thing it's pointing at
$ pb getstream stream1
tree/sha256/be20cdac6a4090168bf8a9423ef6ae2c5f027522aee87e06c384a8f9466e992c

# get stream fail
$ pb getstream stream42 --> FAIL
lstat ${ROOTDIR}/var/stream/stream42: no such file or directory

# list all of the leaf nodes in a stream 
$ pb lsstream stream1
blob/sha256/814dae28c0306f25a40c515f53645a4af8bfd64247676e269c3b11c4a6068bce
blob/sha256/22c8aa3f0cb68164b766ce1b6bfef1b2dec069a7ef2ef17b74cdacf20042d995
blob/sha256/d173706e5ab6e45e3f99389002d085dc6ad663d4b8140cd98387708196425ab2

# list all of the nodes in a stream, both leaf and inner, depth first
$ pb lsstream -a stream1
tree/sha256/be20cdac6a4090168bf8a9423ef6ae2c5f027522aee87e06c384a8f9466e992c
tree/sha256/cbfaaffc675984fb796f15852275f3259e5240f1d6ce37cf0932b9eb78f83ce0
blob/sha256/814dae28c0306f25a40c515f53645a4af8bfd64247676e269c3b11c4a6068bce
blob/sha256/22c8aa3f0cb68164b766ce1b6bfef1b2dec069a7ef2ef17b74cdacf20042d995
blob/sha256/d173706e5ab6e45e3f99389002d085dc6ad663d4b8140cd98387708196425ab2

# lsstream fail
$ pb lsstream stream42 --> FAIL
lstat ${ROOTDIR}/var/stream/stream42: no such file or directory

$ pb lsstream -a stream42 --> FAIL
lstat ${ROOTDIR}/var/stream/stream42: no such file or directory

# show a concatenation of all leaf node content in a stream
$ pb catstream stream1
multiline blob
this is line 2
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut vitae
dapibus lorem. Pellentesque habitant morbi tristique senectus et netus
et malesuada fames ac turpis egestas. Phasellus suscipit mattis
interdum. Praesent nec diam mi. In placerat est sit amet cursus
ullamcorper. Sed porta dignissim elementum. Quisque at dui pharetra,
rhoncus nibh in, maximus erat. Praesent diam sapien, semper sed
sollicitudin id, porttitor eu urna. Quisque vitae ligula non mi
sagittis varius. Orci varius natoque penatibus et magnis dis
parturient montes, nascetur ridiculus mus.
this is blob1

# same, but for tree
$ pb cattree tree/sha256/be20cdac6a4090168bf8a9423ef6ae2c5f027522aee87e06c384a8f9466e992c 
multiline blob
this is line 2
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut vitae
dapibus lorem. Pellentesque habitant morbi tristique senectus et netus
et malesuada fames ac turpis egestas. Phasellus suscipit mattis
interdum. Praesent nec diam mi. In placerat est sit amet cursus
ullamcorper. Sed porta dignissim elementum. Quisque at dui pharetra,
rhoncus nibh in, maximus erat. Praesent diam sapien, semper sed
sollicitudin id, porttitor eu urna. Quisque vitae ligula non mi
sagittis varius. Orci varius natoque penatibus et magnis dis
parturient montes, nascetur ridiculus mus.
this is blob1

# catstream fail
$ pb catstream stream42 --> FAIL
lstat ${ROOTDIR}/var/stream/stream42: no such file or directory

# improve coverage
$ pb putblob lkdsajf --> FAIL
function not implemented: lkdsajf

$ pb getblob kakajsn --> FAIL
malformed path: kakajsn: invalid argument

$ pb lsstream lsadkfj --> FAIL
lstat ${ROOTDIR}/var/stream/lsadkfj: no such file or directory

# putfile
# create a huge file
$ dd status=none if=/dev/urandom of=${ROOTDIR}/hugefile bs=1M count=100

# put it 
$ pb putstream -q sha256 stream7 < ${ROOTDIR}/hugefile


# get it and save to hugefile.copy
$ pb catstream stream7 -o ${ROOTDIR}/hugefile.copy 

# compare
$ cmp ${ROOTDIR}/hugefile ${ROOTDIR}/hugefile.copy

# try executing code in an arbitrary language
# load the lang1 interpreter
$ pb putstream sha256 lang1 < ../lang1.sh 
stream/lang1 -> tree/sha256/103743348a1a8ce7f50f1f27c6ce62e335e9f31cf64b0707e581e049a8b1ce64

# run a script written in lang1
$ pb exec ../hello.lang1
Hello, Universe!

# ensure stream names can include slashes
# XXX - also need to ensure they don't include '..', or that they otherwise
# XXX   resolve to anything outside of ./stream/
# $ pb puttree sha256 blob/sha256/1a7/b18/1a7b18e13062cfcdc1f36d53d0a852794e2547f8cf6379afd0c85958ba166262,/some/path
# tree/sha256/8334d1e784ad1c5567a84ae7d182dc9e10b5778c02c15cd8ffc8200b673b435c
# $ pb putstream tree/sha256/8334d1e784ad1c5567a84ae7d182dc9e10b5778c02c15cd8ffc8200b673b435c /some/stream
# /some/stream -> tree/sha256/8334d1e784ad1c5567a84ae7d182dc9e10b5778c02c15cd8ffc8200b673b435c

